require("dotenv").config();
const express = require("express");
const axios = require("axios");

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware xá»­ lÃ½ JSON
app.use(express.json());

// âœ… Route xá»­ lÃ½ dá»‹ch ngÃ´n ngá»¯ (Test báº±ng Postman hoáº·c Slack)
app.post("/translate", async (req, res) => {
  try {
    const { text } = req.body;
    if (!text) {
      return res.status(400).json({ error: "Thiáº¿u dá»¯ liá»‡u vÄƒn báº£n cáº§n dá»‹ch" });
    }

    // ğŸŸ¢ PhÃ¡t hiá»‡n ngÃ´n ngá»¯ gá»‘c
    const detectRes = await axios.post(`${process.env.LIBRETRANSLATE_API}/detect`, { q: text });
    const lang = detectRes.data[0]?.language || "unknown";

    let translations = {};
    if (lang === "ja") {
      translations = {
        vi: await translate(text, "vi"),
        en: await translate(text, "en"),
      };
    } else if (lang === "vi") {
      translations = {
        ja: await translate(text, "ja"),
        en: await translate(text, "en"),
      };
    } else if (lang === "en") {
      translations = {
        ja: await translate(text, "ja"),
        vi: await translate(text, "vi"),
      };
    } else {
      return res.status(400).json({ error: "KhÃ´ng xÃ¡c Ä‘á»‹nh Ä‘Æ°á»£c ngÃ´n ngá»¯" });
    }

    res.json({
      detected_language: lang,
      translations,
    });
  } catch (error) {
    console.error("Lá»—i dá»‹ch vÄƒn báº£n:", error);
    res.status(500).json({ error: "Lá»—i há»‡ thá»‘ng" });
  }
});

// ğŸŸ¢ HÃ m dá»‹ch vÄƒn báº£n
async function translate(text, targetLang) {
  try {
    const res = await axios.post(`${process.env.LIBRETRANSLATE_API}/translate`, {
      q: text,
      source: "auto",
      target: targetLang,
    });
    return res.data.translatedText || text;
  } catch (error) {
    console.error(`Lá»—i dá»‹ch sang ${targetLang}:`, error);
    return text;
  }
}

// âœ… Xá»­ lÃ½ challenge tá»« Slack khi thÃªm Event Subscriptions
app.post("/slack/events", async (req, res) => {
  if (req.body.type === "url_verification") {
    return res.json({ challenge: req.body.challenge });
  }
  res.status(200).send("OK");
});

// Khá»Ÿi Ä‘á»™ng server
app.listen(PORT, () => {
  console.log(`ğŸš€ Server Ä‘ang cháº¡y trÃªn cá»•ng ${PORT}`);
});
